Return-Path: <linux-arm-kernel-bounces+lists+linux-arm-kernel=lfdr.de@lists.infradead.org>
X-Original-To: lists+linux-arm-kernel@lfdr.de
Delivered-To: lists+linux-arm-kernel@lfdr.de
Received: from bombadil.infradead.org (bombadil.infradead.org [IPv6:2607:7c80:54:e::133])
	by mail.lfdr.de (Postfix) with ESMTPS id 2443D190CF8
	for <lists+linux-arm-kernel@lfdr.de>; Tue, 24 Mar 2020 13:02:22 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.infradead.org; s=bombadil.20170209; h=Sender:
	Content-Transfer-Encoding:Content-Type:Cc:List-Subscribe:List-Help:List-Post:
	List-Archive:List-Unsubscribe:List-Id:In-Reply-To:MIME-Version:Date:
	Message-ID:References:To:Subject:From:Reply-To:Content-ID:Content-Description
	:Resent-Date:Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:
	List-Owner; bh=T4pcuE3AjpsjPSPGgvOvt0BEv2tcLaW+BlKQXvU8ybU=; b=MZctVEAK8KCi3D
	66N3GJAKY1JlW5q8ZhqreS/x7Gtikhzyu65dAb9tcjh6AR/Rh00roS9Qhj7O7pw/RqI4OYlE2XSbx
	8GDPMgLUgxKVv7g1TBbZL7KW4/56n/bTAQtxdTzmU/TLEvsyY1IhfcNmlJHka9Bv/VKLWNJqORCRO
	fJ5AxR3KMRTU/6QGqHEXCrdQpVdjhDB4jAQEXPoZm2n/YaeP81YRNiwuJjlweHuMGAB9q4q64QOQG
	vb6elA1OZxmr0tnEhzVq2RxkcA8rlpbNlvz8pl/dO6Ac7W4Y7AwFt9bJ08IAV9NbnzlatrgKVry0n
	uuFRFIIqzL8VzflrhW8Q==;
Received: from localhost ([127.0.0.1] helo=bombadil.infradead.org)
	by bombadil.infradead.org with esmtp (Exim 4.92.3 #3 (Red Hat Linux))
	id 1jGiFp-0000lW-JT; Tue, 24 Mar 2020 12:01:57 +0000
Received: from foss.arm.com ([217.140.110.172])
 by bombadil.infradead.org with esmtp (Exim 4.92.3 #3 (Red Hat Linux))
 id 1jGiFY-0000kE-Tn; Tue, 24 Mar 2020 12:01:43 +0000
Received: from usa-sjc-imap-foss1.foss.arm.com (unknown [10.121.207.14])
 by usa-sjc-mx-foss1.foss.arm.com (Postfix) with ESMTP id B4F171FB;
 Tue, 24 Mar 2020 05:01:35 -0700 (PDT)
Received: from [10.163.1.71] (unknown [10.163.1.71])
 by usa-sjc-imap-foss1.foss.arm.com (Postfix) with ESMTPSA id DD49C3F792;
 Tue, 24 Mar 2020 05:01:26 -0700 (PDT)
From: Anshuman Khandual <anshuman.khandual@arm.com>
Subject: Re: [PATCH V2 1/2] mm/sparsemem: Enable vmem_altmap support in
 vmemmap_populate_basepages()
To: Robin Murphy <robin.murphy@arm.com>, linux-mm@kvack.org
References: <1583331030-7335-1-git-send-email-anshuman.khandual@arm.com>
 <1583331030-7335-2-git-send-email-anshuman.khandual@arm.com>
 <5e1bad9b-11d7-344c-766f-162f7a779941@arm.com>
Message-ID: <dd9cae33-e106-1e85-28e4-ce3b89d41f44@arm.com>
Date: Tue, 24 Mar 2020 17:31:21 +0530
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101
 Thunderbird/52.9.1
MIME-Version: 1.0
In-Reply-To: <5e1bad9b-11d7-344c-766f-162f7a779941@arm.com>
Content-Language: en-US
X-CRM114-Version: 20100106-BlameMichelson ( TRE 0.8.0 (BSD) ) MR-646709E3 
X-CRM114-CacheID: sfid-20200324_050141_060123_A3403632 
X-CRM114-Status: GOOD (  32.93  )
X-Spam-Score: -2.3 (--)
X-Spam-Report: SpamAssassin version 3.4.3 on bombadil.infradead.org summary:
 Content analysis details:   (-2.3 points)
 pts rule name              description
 ---- ---------------------- --------------------------------------------------
 -2.3 RCVD_IN_DNSWL_MED      RBL: Sender listed at https://www.dnswl.org/,
 medium trust [217.140.110.172 listed in list.dnswl.org]
 -0.0 SPF_PASS               SPF: sender matches SPF record
 0.0 SPF_HELO_NONE          SPF: HELO does not publish an SPF Record
X-BeenThere: linux-arm-kernel@lists.infradead.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: <linux-arm-kernel.lists.infradead.org>
List-Unsubscribe: <http://lists.infradead.org/mailman/options/linux-arm-kernel>, 
 <mailto:linux-arm-kernel-request@lists.infradead.org?subject=unsubscribe>
List-Archive: <http://lists.infradead.org/pipermail/linux-arm-kernel/>
List-Post: <mailto:linux-arm-kernel@lists.infradead.org>
List-Help: <mailto:linux-arm-kernel-request@lists.infradead.org?subject=help>
List-Subscribe: <http://lists.infradead.org/mailman/listinfo/linux-arm-kernel>, 
 <mailto:linux-arm-kernel-request@lists.infradead.org?subject=subscribe>
Cc: Mark Rutland <mark.rutland@arm.com>, Michal Hocko <mhocko@suse.com>,
 linux-ia64@vger.kernel.org, David Hildenbrand <david@redhat.com>,
 Peter Zijlstra <peterz@infradead.org>,
 Catalin Marinas <catalin.marinas@arm.com>,
 Dave Hansen <dave.hansen@linux.intel.com>, linux-riscv@lists.infradead.org,
 Will Deacon <will@kernel.org>, Thomas Gleixner <tglx@linutronix.de>,
 x86@kernel.org, "Matthew Wilcox \(Oracle\)" <willy@infradead.org>,
 Mike Rapoport <rppt@linux.ibm.com>, Ingo Molnar <mingo@redhat.com>,
 Fenghua Yu <fenghua.yu@intel.com>, Pavel Tatashin <pasha.tatashin@soleen.com>,
 Andy Lutomirski <luto@kernel.org>, Paul Walmsley <paul.walmsley@sifive.com>,
 Dan Williams <dan.j.williams@intel.com>, linux-arm-kernel@lists.infradead.org,
 Tony Luck <tony.luck@intel.com>, linux-kernel@vger.kernel.org,
 Palmer Dabbelt <palmer@dabbelt.com>, Andrew Morton <akpm@linux-foundation.org>,
 "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: "linux-arm-kernel" <linux-arm-kernel-bounces@lists.infradead.org>
Errors-To: linux-arm-kernel-bounces+lists+linux-arm-kernel=lfdr.de@lists.infradead.org

Ck9uIDAzLzIwLzIwMjAgMTA6MzggUE0sIFJvYmluIE11cnBoeSB3cm90ZToKPiBPbiAyMDIwLTAz
LTA0IDI6MTAgcG0sIEFuc2h1bWFuIEtoYW5kdWFsIHdyb3RlOgo+PiB2bWVtbWFwX3BvcHVsYXRl
X2Jhc2VwYWdlcygpIGlzIHVzZWQgYWNyb3NzIHBsYXRmb3JtcyB0byBhbGxvY2F0ZSBiYWNraW5n
Cj4+IG1lbW9yeSBmb3Igdm1lbW1hcCBtYXBwaW5nLiBUaGlzIGlzIHVzZWQgYXMgYSBzdGFuZGFy
ZCBkZWZhdWx0IGNob2ljZSBvcgo+PiBhcyBhIGZhbGxiYWNrIHdoZW4gaW50ZW5kZWQgaHVnZSBw
YWdlcyBhbGxvY2F0aW9uIGZhaWxzLiBUaGlzIGp1c3QgY3JlYXRlcwo+PiBlbnRpcmUgdm1lbW1h
cCBtYXBwaW5nIHdpdGggYmFzZSBwYWdlcyAoUEFHRV9TSVpFKS4KPj4KPj4gT24gYXJtNjQgcGxh
dGZvcm1zLCB2bWVtbWFwX3BvcHVsYXRlX2Jhc2VwYWdlcygpIGlzIGNhbGxlZCBpbnN0ZWFkIG9m
IHRoZQo+PiBwbGF0Zm9ybSBzcGVjaWZpYyB2bWVtbWFwX3BvcHVsYXRlKCkgd2hlbiBBUk02NF9T
V0FQUEVSX1VTRVNfU0VDVElPTl9NQVBTCj4+IGlzIG5vdCBlbmFibGVkIGFzIGluIGNhc2UgZm9y
IEFSTTY0XzE2S19QQUdFUyBhbmQgQVJNNjRfNjRLX1BBR0VTIGNvbmZpZ3MuCj4+Cj4+IEF0IHBy
ZXNlbnQgdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMoKSBkb2VzIG5vdCBzdXBwb3J0IGFsbG9j
YXRpbmcgZnJvbQo+PiBkcml2ZXIgZGVmaW5lZCBzdHJ1Y3Qgdm1lbV9hbHRtYXAgd2hpbGUgdHJ5
aW5nIHRvIGNyZWF0ZSB2bWVtbWFwIG1hcHBpbmcKPj4gZm9yIGEgZGV2aWNlIG1lbW9yeSByYW5n
ZS4gSXQgcHJldmVudHMgQVJNNjRfMTZLX1BBR0VTIGFuZCBBUk02NF82NEtfUEFHRVMKPj4gY29u
ZmlncyBvbiBhcm02NCBmcm9tIHN1cHBvcnRpbmcgZGV2aWNlIG1lbW9yeSB3aXRoIHZtZW1hcF9h
bHRtYXAgcmVxdWVzdC4KPj4KPj4gVGhpcyBlbmFibGVzIHZtZW1fYWx0bWFwIHN1cHBvcnQgaW4g
dm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMoKSB1bmxvY2tpbmcKPj4gZGV2aWNlIG1lbW9yeSBh
bGxvY2F0aW9uIGZvciB2bWVtYXAgbWFwcGluZyBvbiBhcm02NCBwbGF0Zm9ybXMgd2l0aCAxNksg
b3IKPj4gNjRLIGJhc2UgcGFnZSBjb25maWdzLgo+Pgo+PiBFYWNoIGFyY2hpdGVjdHVyZSBzaG91
bGQgZXZhbHVhdGUgYW5kIGRlY2lkZSBvbiBzdWJzY3JpYmluZyBkZXZpY2UgbWVtb3J5Cj4+IGJh
c2VkIGJhc2UgcGFnZSBhbGxvY2F0aW9uIHRocm91Z2ggdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFn
ZXMoKS4gSGVuY2UgbGV0cwo+PiBrZWVwIGl0IGRpc2FibGVkIG9uIGFsbCBhcmNocyBpbiBvcmRl
ciB0byBwcmVzZXJ2ZSB0aGUgZXhpc3Rpbmcgc2VtYW50aWNzLgo+PiBBIHN1YnNlcXVlbnQgcGF0
Y2ggZW5hYmxlcyBpdCBvbiBhcm02NC4KPiAKPiBJIGd1ZXNzIGJ1eS1pbiBmb3IgdGhpcyBjaGFu
Z2UgbGFyZ2VseSBkZXBlbmRzIG9uIHdoZXRoZXIgYW55IG90aGVyIGFyY2hpdGVjdHVyZXMgYXJl
IGxpa2VseSB0byB3YW50IHRvIHNoYXJlIGl0LiBUaGUgZXhpc3RpbmcgYWx0bWFwIHVzZXJzIGRv
bid0IGxvb2sgbGlrZSB0aGV5IHdvdWxkLCBzbyB0aGF0J3MgcHJvYmFibHkgbW9yZSBhIHF1ZXN0
aW9uIGZvciB0aGUgbGlrZXMgb2YgUzM5MCBhbmQgUklTQy1WLgoKSWYgdm1lbW1hcF9wb3B1bGF0
ZV9iYXNlcGFnZXMoKSBleGlzdHMgdG8gYmUgc2hhcmVkIGFjcm9zcyBwbGF0Zm9ybXMgZm9yCmNy
ZWF0aW5nIHZtZW1tYXAgbWFwcGluZyB3aXRoIGJhc2UgcGFnZXMsIHRoZW4gdGhlcmUgZG9lcyBu
b3Qgc2VlbSB0byBiZQphbnkgZ29vZCByZWFzb24gZm9yIGl0IG5vdCB0byBzdXBwb3J0IGFsdG1h
cCByZXF1ZXN0cyBhcyB3ZWxsLgoKPiAKPiBGYWlsaW5nIHRoYXQsIHNpbXBseSBkZWNvdXBsaW5n
IGFybTY0IGZyb20gdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMoKSBzZWVtcyB2aWFibGUgLSBJ
IHRyaWVkIGhhY2tpbmcgdXAgYSBxdWljayBwcm9vZi1vZi1jb25jZXB0IChhdHRhY2hlZCBhdCB0
aGUgZW5kKSBhbmQgaXQgZG9lc24ndCBjb21lIG91dCBsb29raW5nICp0b28qIGRpc2d1c3Rpbmcu
CgpFdmVuIHRob3VnaCB0aGlzIG9wdGlvbiBzZWVtZWQgdmlhYmxlIHRvIG1lIGF0IHRoZSBiZWdp
bm5pbmcsIHRoZXJlIHdhcwpubyBwYXJ0aWN1bGFyIHByZXNzaW5nIHJlYXNvbnMgZm9yIHZtZW1t
YXBfcG9wdWxhdGVfYmFzZXBhZ2VzKCkgdG8gZXhpc3QKYXMgYSBnZW5lcmljIGZ1bmN0aW9uIGFu
ZCBub3Qgc3VwcG9ydCBhdGxhbXAuIElmIGVhY2ggYXJjaGl0ZWN0dXJlIGp1c3QKY3JlYXRlIHRo
ZWlyIG93biBwb2xpY2llcyByZWdhcmRpbmcgd2hpY2ggbGV2ZWwgdG8gc3VwcG9ydCBhbHRtYXAg
b3Igbm90CndoaWxlIGFsc28gdXNpbmcgYSBnZW5lcmljIGZ1bmN0aW9uLCB0aGVuIHdoeSBldmVu
IGhhdmUgYSBtaW5pbXVtIHNoYXJlZApmdW5jdGlvbiBsaWtlIHZtZW1tYXBfcG9wdWxhdGVfYmFz
ZXBhZ2VzKCkgaW4gdGhlIGZpcnN0IHBsYWNlLgoKPiAKPj4gQ2M6IENhdGFsaW4gTWFyaW5hcyA8
Y2F0YWxpbi5tYXJpbmFzQGFybS5jb20+Cj4+IENjOiBXaWxsIERlYWNvbiA8d2lsbEBrZXJuZWwu
b3JnPgo+PiBDYzogTWFyayBSdXRsYW5kIDxtYXJrLnJ1dGxhbmRAYXJtLmNvbT4KPj4gQ2M6IFBh
dWwgV2FsbXNsZXkgPHBhdWwud2FsbXNsZXlAc2lmaXZlLmNvbT4KPj4gQ2M6IFBhbG1lciBEYWJi
ZWx0IDxwYWxtZXJAZGFiYmVsdC5jb20+Cj4+IENjOiBUb255IEx1Y2sgPHRvbnkubHVja0BpbnRl
bC5jb20+Cj4+IENjOiBGZW5naHVhIFl1IDxmZW5naHVhLnl1QGludGVsLmNvbT4KPj4gQ2M6IERh
dmUgSGFuc2VuIDxkYXZlLmhhbnNlbkBsaW51eC5pbnRlbC5jb20+Cj4+IENjOiBBbmR5IEx1dG9t
aXJza2kgPGx1dG9Aa2VybmVsLm9yZz4KPj4gQ2M6IFBldGVyIFppamxzdHJhIDxwZXRlcnpAaW5m
cmFkZWFkLm9yZz4KPj4gQ2M6IFRob21hcyBHbGVpeG5lciA8dGdseEBsaW51dHJvbml4LmRlPgo+
PiBDYzogSW5nbyBNb2xuYXIgPG1pbmdvQHJlZGhhdC5jb20+Cj4+IENjOiBEYXZpZCBIaWxkZW5i
cmFuZCA8ZGF2aWRAcmVkaGF0LmNvbT4KPj4gQ2M6IE1pa2UgUmFwb3BvcnQgPHJwcHRAbGludXgu
aWJtLmNvbT4KPj4gQ2M6IE1pY2hhbCBIb2NrbyA8bWhvY2tvQHN1c2UuY29tPgo+PiBDYzogIk1h
dHRoZXcgV2lsY294IChPcmFjbGUpIiA8d2lsbHlAaW5mcmFkZWFkLm9yZz4KPj4gQ2M6ICJLaXJp
bGwgQS4gU2h1dGVtb3YiIDxraXJpbGwuc2h1dGVtb3ZAbGludXguaW50ZWwuY29tPgo+PiBDYzog
QW5kcmV3IE1vcnRvbiA8YWtwbUBsaW51eC1mb3VuZGF0aW9uLm9yZz4KPj4gQ2M6IERhbiBXaWxs
aWFtcyA8ZGFuLmoud2lsbGlhbXNAaW50ZWwuY29tPgo+PiBDYzogUGF2ZWwgVGF0YXNoaW4gPHBh
c2hhLnRhdGFzaGluQHNvbGVlbi5jb20+Cj4+IENjOiBsaW51eC1hcm0ta2VybmVsQGxpc3RzLmlu
ZnJhZGVhZC5vcmcKPj4gQ2M6IGxpbnV4LWlhNjRAdmdlci5rZXJuZWwub3JnCj4+IENjOiBsaW51
eC1yaXNjdkBsaXN0cy5pbmZyYWRlYWQub3JnCj4+IENjOiB4ODZAa2VybmVsLm9yZwo+PiBDYzog
bGludXgta2VybmVsQHZnZXIua2VybmVsLm9yZwo+Pgo+PiBBY2tlZC1ieTogV2lsbCBEZWFjb24g
PHdpbGxAa2VybmVsLm9yZz4KPj4gU2lnbmVkLW9mZi1ieTogQW5zaHVtYW4gS2hhbmR1YWwgPGFu
c2h1bWFuLmtoYW5kdWFsQGFybS5jb20+Cj4+IC0tLQo+PiDCoCBhcmNoL2FybTY0L21tL21tdS5j
wqDCoMKgwqDCoCB8wqAgMiArLQo+PiDCoCBhcmNoL2lhNjQvbW0vZGlzY29udGlnLmMgfMKgIDIg
Ky0KPj4gwqAgYXJjaC9yaXNjdi9tbS9pbml0LmPCoMKgwqDCoCB8wqAgMiArLQo+PiDCoCBhcmNo
L3g4Ni9tbS9pbml0XzY0LmPCoMKgwqAgfMKgIDYgKysrLS0tCj4+IMKgIGluY2x1ZGUvbGludXgv
bW0uaMKgwqDCoMKgwqDCoCB8wqAgNSArKystLQo+PiDCoCBtbS9zcGFyc2Utdm1lbW1hcC5jwqDC
oMKgwqDCoCB8IDE2ICsrKysrKysrKysrLS0tLS0KPj4gwqAgNiBmaWxlcyBjaGFuZ2VkLCAyMCBp
bnNlcnRpb25zKCspLCAxMyBkZWxldGlvbnMoLSkKPj4KPj4gZGlmZiAtLWdpdCBhL2FyY2gvYXJt
NjQvbW0vbW11LmMgYi9hcmNoL2FybTY0L21tL21tdS5jCj4+IGluZGV4IDliMDhmN2M3ZTZmMC4u
MjdjYjk1YzQ3MWViIDEwMDY0NAo+PiAtLS0gYS9hcmNoL2FybTY0L21tL21tdS5jCj4+ICsrKyBi
L2FyY2gvYXJtNjQvbW0vbW11LmMKPj4gQEAgLTEwMzYsNyArMTAzNiw3IEBAIHN0YXRpYyB2b2lk
IGZyZWVfZW1wdHlfdGFibGVzKHVuc2lnbmVkIGxvbmcgYWRkciwgdW5zaWduZWQgbG9uZyBlbmQs
Cj4+IMKgIGludCBfX21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIHN0YXJ0
LCB1bnNpZ25lZCBsb25nIGVuZCwgaW50IG5vZGUsCj4+IMKgwqDCoMKgwqDCoMKgwqDCoCBzdHJ1
Y3Qgdm1lbV9hbHRtYXAgKmFsdG1hcCkKPj4gwqAgewo+PiAtwqDCoMKgIHJldHVybiB2bWVtbWFw
X3BvcHVsYXRlX2Jhc2VwYWdlcyhzdGFydCwgZW5kLCBub2RlKTsKPj4gK8KgwqDCoCByZXR1cm4g
dm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMoc3RhcnQsIGVuZCwgbm9kZSwgTlVMTCk7Cj4+IMKg
IH0KPj4gwqAgI2Vsc2XCoMKgwqAgLyogIUFSTTY0X1NXQVBQRVJfVVNFU19TRUNUSU9OX01BUFMg
Ki8KPj4gwqAgaW50IF9fbWVtaW5pdCB2bWVtbWFwX3BvcHVsYXRlKHVuc2lnbmVkIGxvbmcgc3Rh
cnQsIHVuc2lnbmVkIGxvbmcgZW5kLCBpbnQgbm9kZSwKPj4gZGlmZiAtLWdpdCBhL2FyY2gvaWE2
NC9tbS9kaXNjb250aWcuYyBiL2FyY2gvaWE2NC9tbS9kaXNjb250aWcuYwo+PiBpbmRleCA0ZjMz
ZjZlN2UyMDYuLjIwNDA5ZjNhZmVhOCAxMDA2NDQKPj4gLS0tIGEvYXJjaC9pYTY0L21tL2Rpc2Nv
bnRpZy5jCj4+ICsrKyBiL2FyY2gvaWE2NC9tbS9kaXNjb250aWcuYwo+PiBAQCAtNjU2LDcgKzY1
Niw3IEBAIHZvaWQgYXJjaF9yZWZyZXNoX25vZGVkYXRhKGludCB1cGRhdGVfbm9kZSwgcGdfZGF0
YV90ICp1cGRhdGVfcGdkYXQpCj4+IMKgIGludCBfX21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1
bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwgaW50IG5vZGUsCj4+IMKgwqDC
oMKgwqDCoMKgwqDCoCBzdHJ1Y3Qgdm1lbV9hbHRtYXAgKmFsdG1hcCkKPj4gwqAgewo+PiAtwqDC
oMKgIHJldHVybiB2bWVtbWFwX3BvcHVsYXRlX2Jhc2VwYWdlcyhzdGFydCwgZW5kLCBub2RlKTsK
Pj4gK8KgwqDCoCByZXR1cm4gdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMoc3RhcnQsIGVuZCwg
bm9kZSwgTlVMTCk7Cj4+IMKgIH0KPj4gwqAgwqAgdm9pZCB2bWVtbWFwX2ZyZWUodW5zaWduZWQg
bG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQsCj4+IGRpZmYgLS1naXQgYS9hcmNoL3Jpc2N2
L21tL2luaXQuYyBiL2FyY2gvcmlzY3YvbW0vaW5pdC5jCj4+IGluZGV4IDk2NWE4Y2Y0ODI5Yy4u
MWQ3NDUxYzkxOTgyIDEwMDY0NAo+PiAtLS0gYS9hcmNoL3Jpc2N2L21tL2luaXQuYwo+PiArKysg
Yi9hcmNoL3Jpc2N2L21tL2luaXQuYwo+PiBAQCAtNTAxLDYgKzUwMSw2IEBAIHZvaWQgX19pbml0
IHBhZ2luZ19pbml0KHZvaWQpCj4+IMKgIGludCBfX21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1
bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwgaW50IG5vZGUsCj4+IMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgc3RydWN0IHZtZW1fYWx0bWFwICph
bHRtYXApCj4+IMKgIHsKPj4gLcKgwqDCoCByZXR1cm4gdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFn
ZXMoc3RhcnQsIGVuZCwgbm9kZSk7Cj4+ICvCoMKgwqAgcmV0dXJuIHZtZW1tYXBfcG9wdWxhdGVf
YmFzZXBhZ2VzKHN0YXJ0LCBlbmQsIG5vZGUsIE5VTEwpOwo+PiDCoCB9Cj4+IMKgICNlbmRpZgo+
PiBkaWZmIC0tZ2l0IGEvYXJjaC94ODYvbW0vaW5pdF82NC5jIGIvYXJjaC94ODYvbW0vaW5pdF82
NC5jCj4+IGluZGV4IGFiYmRlY2I3NWZhZC4uMzI3MmZlMGQ4NDRhIDEwMDY0NAo+PiAtLS0gYS9h
cmNoL3g4Ni9tbS9pbml0XzY0LmMKPj4gKysrIGIvYXJjaC94ODYvbW0vaW5pdF82NC5jCj4+IEBA
IC0xNDcxLDcgKzE0NzEsNyBAQCBzdGF0aWMgaW50IF9fbWVtaW5pdCB2bWVtbWFwX3BvcHVsYXRl
X2h1Z2VwYWdlcyh1bnNpZ25lZCBsb25nIHN0YXJ0LAo+PiDCoMKgwqDCoMKgwqDCoMKgwqDCoMKg
wqDCoCB2bWVtbWFwX3ZlcmlmeSgocHRlX3QgKilwbWQsIG5vZGUsIGFkZHIsIG5leHQpOwo+PiDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBjb250aW51ZTsKPj4gwqDCoMKgwqDCoMKgwqDCoMKg
IH0KPj4gLcKgwqDCoMKgwqDCoMKgIGlmICh2bWVtbWFwX3BvcHVsYXRlX2Jhc2VwYWdlcyhhZGRy
LCBuZXh0LCBub2RlKSkKPj4gK8KgwqDCoMKgwqDCoMKgIGlmICh2bWVtbWFwX3BvcHVsYXRlX2Jh
c2VwYWdlcyhhZGRyLCBuZXh0LCBub2RlLCBOVUxMKSkKPj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgwqAgcmV0dXJuIC1FTk9NRU07Cj4+IMKgwqDCoMKgwqAgfQo+PiDCoMKgwqDCoMKgIHJldHVy
biAwOwo+PiBAQCAtMTQ4Myw3ICsxNDgzLDcgQEAgaW50IF9fbWVtaW5pdCB2bWVtbWFwX3BvcHVs
YXRlKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLCBpbnQgbm9kZSwKPj4g
wqDCoMKgwqDCoCBpbnQgZXJyOwo+PiDCoCDCoMKgwqDCoMKgIGlmIChlbmQgLSBzdGFydCA8IFBB
R0VTX1BFUl9TRUNUSU9OICogc2l6ZW9mKHN0cnVjdCBwYWdlKSkKPj4gLcKgwqDCoMKgwqDCoMKg
IGVyciA9IHZtZW1tYXBfcG9wdWxhdGVfYmFzZXBhZ2VzKHN0YXJ0LCBlbmQsIG5vZGUpOwo+PiAr
wqDCoMKgwqDCoMKgwqAgZXJyID0gdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMoc3RhcnQsIGVu
ZCwgbm9kZSwgTlVMTCk7Cj4+IMKgwqDCoMKgwqAgZWxzZSBpZiAoYm9vdF9jcHVfaGFzKFg4Nl9G
RUFUVVJFX1BTRSkpCj4+IMKgwqDCoMKgwqDCoMKgwqDCoCBlcnIgPSB2bWVtbWFwX3BvcHVsYXRl
X2h1Z2VwYWdlcyhzdGFydCwgZW5kLCBub2RlLCBhbHRtYXApOwo+PiDCoMKgwqDCoMKgIGVsc2Ug
aWYgKGFsdG1hcCkgewo+PiBAQCAtMTQ5MSw3ICsxNDkxLDcgQEAgaW50IF9fbWVtaW5pdCB2bWVt
bWFwX3BvcHVsYXRlKHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLCBpbnQg
bm9kZSwKPj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBfX2Z1bmNfXyk7Cj4+
IMKgwqDCoMKgwqDCoMKgwqDCoCBlcnIgPSAtRU5PTUVNOwo+PiDCoMKgwqDCoMKgIH0gZWxzZQo+
PiAtwqDCoMKgwqDCoMKgwqAgZXJyID0gdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMoc3RhcnQs
IGVuZCwgbm9kZSk7Cj4+ICvCoMKgwqDCoMKgwqDCoCBlcnIgPSB2bWVtbWFwX3BvcHVsYXRlX2Jh
c2VwYWdlcyhzdGFydCwgZW5kLCBub2RlLCBOVUxMKTsKPj4gwqDCoMKgwqDCoCBpZiAoIWVycikK
Pj4gwqDCoMKgwqDCoMKgwqDCoMKgIHN5bmNfZ2xvYmFsX3BnZHMoc3RhcnQsIGVuZCAtIDEpOwo+
PiDCoMKgwqDCoMKgIHJldHVybiBlcnI7Cj4+IGRpZmYgLS1naXQgYS9pbmNsdWRlL2xpbnV4L21t
LmggYi9pbmNsdWRlL2xpbnV4L21tLmgKPj4gaW5kZXggNTIyNjllNTZjNTE0Li40MmY5OWM4ZDYz
YzAgMTAwNjQ0Cj4+IC0tLSBhL2luY2x1ZGUvbGludXgvbW0uaAo+PiArKysgYi9pbmNsdWRlL2xp
bnV4L21tLmgKPj4gQEAgLTI3ODAsMTQgKzI3ODAsMTUgQEAgcGdkX3QgKnZtZW1tYXBfcGdkX3Bv
cHVsYXRlKHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IG5vZGUpOwo+PiDCoCBwNGRfdCAqdm1lbW1h
cF9wNGRfcG9wdWxhdGUocGdkX3QgKnBnZCwgdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbm9kZSk7
Cj4+IMKgIHB1ZF90ICp2bWVtbWFwX3B1ZF9wb3B1bGF0ZShwNGRfdCAqcDRkLCB1bnNpZ25lZCBs
b25nIGFkZHIsIGludCBub2RlKTsKPj4gwqAgcG1kX3QgKnZtZW1tYXBfcG1kX3BvcHVsYXRlKHB1
ZF90ICpwdWQsIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IG5vZGUpOwo+PiAtcHRlX3QgKnZtZW1t
YXBfcHRlX3BvcHVsYXRlKHBtZF90ICpwbWQsIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50IG5vZGUp
Owo+PiArcHRlX3QgKnZtZW1tYXBfcHRlX3BvcHVsYXRlKHBtZF90ICpwbWQsIHVuc2lnbmVkIGxv
bmcgYWRkciwgaW50IG5vZGUsCj4+ICvCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgc3Ry
dWN0IHZtZW1fYWx0bWFwICphbHRtYXApOwo+PiDCoCB2b2lkICp2bWVtbWFwX2FsbG9jX2Jsb2Nr
KHVuc2lnbmVkIGxvbmcgc2l6ZSwgaW50IG5vZGUpOwo+PiDCoCBzdHJ1Y3Qgdm1lbV9hbHRtYXA7
Cj4+IMKgIHZvaWQgKnZtZW1tYXBfYWxsb2NfYmxvY2tfYnVmKHVuc2lnbmVkIGxvbmcgc2l6ZSwg
aW50IG5vZGUpOwo+PiDCoCB2b2lkICphbHRtYXBfYWxsb2NfYmxvY2tfYnVmKHVuc2lnbmVkIGxv
bmcgc2l6ZSwgc3RydWN0IHZtZW1fYWx0bWFwICphbHRtYXApOwo+PiDCoCB2b2lkIHZtZW1tYXBf
dmVyaWZ5KHB0ZV90ICosIGludCwgdW5zaWduZWQgbG9uZywgdW5zaWduZWQgbG9uZyk7Cj4+IMKg
IGludCB2bWVtbWFwX3BvcHVsYXRlX2Jhc2VwYWdlcyh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNp
Z25lZCBsb25nIGVuZCwKPj4gLcKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBp
bnQgbm9kZSk7Cj4+ICvCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgaW50IG5v
ZGUsIHN0cnVjdCB2bWVtX2FsdG1hcCAqYWx0bWFwKTsKPj4gwqAgaW50IHZtZW1tYXBfcG9wdWxh
dGUodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQsIGludCBub2RlLAo+PiDC
oMKgwqDCoMKgwqDCoMKgwqAgc3RydWN0IHZtZW1fYWx0bWFwICphbHRtYXApOwo+PiDCoCB2b2lk
IHZtZW1tYXBfcG9wdWxhdGVfcHJpbnRfbGFzdCh2b2lkKTsKPj4gZGlmZiAtLWdpdCBhL21tL3Nw
YXJzZS12bWVtbWFwLmMgYi9tbS9zcGFyc2Utdm1lbW1hcC5jCj4+IGluZGV4IDIwMGFlZjY4Njcy
Mi4uYTQwN2FiYzliNDZjIDEwMDY0NAo+PiAtLS0gYS9tbS9zcGFyc2Utdm1lbW1hcC5jCj4+ICsr
KyBiL21tL3NwYXJzZS12bWVtbWFwLmMKPj4gQEAgLTE0MCwxMiArMTQwLDE4IEBAIHZvaWQgX19t
ZW1pbml0IHZtZW1tYXBfdmVyaWZ5KHB0ZV90ICpwdGUsIGludCBub2RlLAo+PiDCoMKgwqDCoMKg
wqDCoMKgwqDCoMKgwqDCoCBzdGFydCwgZW5kIC0gMSk7Cj4+IMKgIH0KPj4gwqAgLXB0ZV90ICog
X19tZW1pbml0IHZtZW1tYXBfcHRlX3BvcHVsYXRlKHBtZF90ICpwbWQsIHVuc2lnbmVkIGxvbmcg
YWRkciwgaW50IG5vZGUpCj4+ICtwdGVfdCAqIF9fbWVtaW5pdCB2bWVtbWFwX3B0ZV9wb3B1bGF0
ZShwbWRfdCAqcG1kLCB1bnNpZ25lZCBsb25nIGFkZHIsIGludCBub2RlLAo+PiArwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgc3RydWN0IHZtZW1fYWx0bWFwICph
bHRtYXApCj4+IMKgIHsKPj4gwqDCoMKgwqDCoCBwdGVfdCAqcHRlID0gcHRlX29mZnNldF9rZXJu
ZWwocG1kLCBhZGRyKTsKPj4gwqDCoMKgwqDCoCBpZiAocHRlX25vbmUoKnB0ZSkpIHsKPj4gwqDC
oMKgwqDCoMKgwqDCoMKgIHB0ZV90IGVudHJ5Owo+PiAtwqDCoMKgwqDCoMKgwqAgdm9pZCAqcCA9
IHZtZW1tYXBfYWxsb2NfYmxvY2tfYnVmKFBBR0VfU0laRSwgbm9kZSk7Cj4+ICvCoMKgwqDCoMKg
wqDCoCB2b2lkICpwOwo+PiArCj4+ICvCoMKgwqDCoMKgwqDCoCBpZiAoYWx0bWFwKQo+PiArwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoCBwID0gYWx0bWFwX2FsbG9jX2Jsb2NrX2J1ZihQQUdFX1NJWkUs
IGFsdG1hcCk7Cj4+ICvCoMKgwqDCoMKgwqDCoCBlbHNlCj4+ICvCoMKgwqDCoMKgwqDCoMKgwqDC
oMKgIHAgPSB2bWVtbWFwX2FsbG9jX2Jsb2NrX2J1ZihQQUdFX1NJWkUsIG5vZGUpOwo+IAo+IFRo
aXMgcGF0dGVybiBlbmRzIHVwIGFwcGVhcmluZyBhIG51bWJlciBvZiB0aW1lcyBieSB0aGUgZW5k
IC0gaWYgd2UgZG8gZ28gZG93biB0aGUgZ2VuZXJpYyBjb2RlIHJvdXRlLCBtaWdodCBpdCBiZSB3
b3J0aCBwdXNoaW5nIGl0IGRvd24gaW50byB2bW1lbW1hcF9hbGxvY19ibG9ja19idWYoKSBpdHNl
bGYgdG8gbWFrZSBpdCBhdXRvbWF0aWM/IChwb3NzaWJseSBldmVuIGluY2x1ZGluZyB0aGUgcG93
ZXJwYyBmYWxsYmFjayBiZWhhdmlvdXIgdG9vPykKClllcywgdGhpcyBwYXR0ZXJuIGlzIG5vdyB0
aGVyZSBpbiBjb3VwbGUgb2YgbW9yZSBwbGFjZXMuIFN1cmUsIHdpbGwgY2hhbmdlCnZtZW1tYXBf
YWxsb2NfYmxvY2tfYnVmKCkgdG8gaGFuZGxlIGFsdG1hcCB3aXRoIGEgZmFsbGJhY2sgcmVxdWVz
dC4KClNvbWV0aGluZyBsaWtlIHRoaXMgKG5vdCB0ZXN0ZWQgcHJvcGVybHkpCgotLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gCkZyb206IEFuc2h1bWFu
IEtoYW5kdWFsIDxhbnNodW1hbi5raGFuZHVhbEBhcm0uY29tPgpEYXRlOiBUdWUsIDI0IE1hciAy
MDIwIDA3OjM1OjQ3ICswMDAwClN1YmplY3Q6IFtQQVRDSF0gbW0vc3BhcnNlOiBFbmFibGUgdm1l
bW1hcF9hbGxvY19ibG9ja19idWYoKSBmb3IgYWx0bWFwCiBhbGxvY2F0aW9ucwoKVGhlcmUgYXJl
IG1hbnkgaW5zdGFuY2VzIHdoZXJlIHZtZW1hcCBhbGxvY2F0aW9uIGlzIG9mdGVuIHN3aXRjaGVk
IGJldHdlZW4KZGV2aWNlIG1lbW9yeSBhbmQgcmVndWxhciBtZW1vcnkgYmFzZWQgb24gd2hldGhl
ciBhbHRtYXAgaXMgYXZhaWxhYmxlIG9yCm5vdC4gdm1lbW1hcF9hbGxvY19ibG9ja19idWYoKSBp
cyB1c2VkIGluIHZhcmlvdXMgcGxhdGZvcm1zIHRvIGFsbG9jYXRlCnZtZW1tYXAuIEhlbmNlIGVu
YWJsZSBpdCB0byBoYW5kbGUgYWx0bWFwIGJhc2VkIGRldmljZSBtZW1vcnkgYWxsb2NhdGlvbiBh
cwp3ZWxsLiBXaGlsZSBoZXJlIGltcGxlbWVudCBhIHJlZ3VsYXIgbWVtb3J5IGFsbG9jYXRpb24g
ZmFsbGJhY2sgbWVjaGFuaXNtCnRoYXQgaXMgdXNlZCBpbiBwb3dlcnBjLgoKU3VnZ2VzdGVkLWJ5
OiBSb2JpbiBNdXJwaHkgPHJvYmluLm11cnBoeUBhcm0uY29tPgpTaWduZWQtb2ZmLWJ5OiBBbnNo
dW1hbiBLaGFuZHVhbCA8YW5zaHVtYW4ua2hhbmR1YWxAYXJtLmNvbT4KLS0tCiBhcmNoL2FybTY0
L21tL21tdS5jICAgICAgIHwgIDYgKystLS0tCiBhcmNoL3Bvd2VycGMvbW0vaW5pdF82NC5jIHwg
MTIgKysrKysrLS0tLS0tCiBhcmNoL3g4Ni9tbS9pbml0XzY0LmMgICAgIHwgIDYgKystLS0tCiBp
bmNsdWRlL2xpbnV4L21tLmggICAgICAgIHwgIDMgKystCiBtbS9zcGFyc2Utdm1lbW1hcC5jICAg
ICAgIHwgMjcgKysrKysrKysrKysrKysrKysrKysrLS0tLS0tCiA1IGZpbGVzIGNoYW5nZWQsIDMz
IGluc2VydGlvbnMoKyksIDIxIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2FyY2gvYXJtNjQv
bW0vbW11LmMgYi9hcmNoL2FybTY0L21tL21tdS5jCmluZGV4IDg4YzViMzU3MDEzYi4uNDVmMDk5
MzVjMTYwIDEwMDY0NAotLS0gYS9hcmNoL2FybTY0L21tL21tdS5jCisrKyBiL2FyY2gvYXJtNjQv
bW0vbW11LmMKQEAgLTEwODAsMTAgKzEwODAsOCBAQCBpbnQgX19tZW1pbml0IHZtZW1tYXBfcG9w
dWxhdGUodW5zaWduZWQgbG9uZyBzdGFydCwgdW5zaWduZWQgbG9uZyBlbmQsIGludCBub2RlLAog
CQlpZiAocG1kX25vbmUoUkVBRF9PTkNFKCpwbWRwKSkpIHsKIAkJCXZvaWQgKnAgPSBOVUxMOwog
Ci0JCQlpZiAoYWx0bWFwKQotCQkJCXAgPSBhbHRtYXBfYWxsb2NfYmxvY2tfYnVmKFBNRF9TSVpF
LCBhbHRtYXApOwotCQkJZWxzZQotCQkJCXAgPSB2bWVtbWFwX2FsbG9jX2Jsb2NrX2J1ZihQTURf
U0laRSwgbm9kZSk7CisJCQlwID0gdm1lbW1hcF9hbGxvY19ibG9ja19idWYoUE1EX1NJWkUsIG5v
ZGUsCisJCQkJCQkgICAgYWx0bWFwLCBmYWxzZSk7CiAJCQlpZiAoIXApCiAJCQkJcmV0dXJuIC1F
Tk9NRU07CiAKZGlmZiAtLWdpdCBhL2FyY2gvcG93ZXJwYy9tbS9pbml0XzY0LmMgYi9hcmNoL3Bv
d2VycGMvbW0vaW5pdF82NC5jCmluZGV4IDQwMDJjZWQzNTk2Zi4uMzE5OTVlYjRiNjJhIDEwMDY0
NAotLS0gYS9hcmNoL3Bvd2VycGMvbW0vaW5pdF82NC5jCisrKyBiL2FyY2gvcG93ZXJwYy9tbS9p
bml0XzY0LmMKQEAgLTE1MCw3ICsxNTAsNyBAQCBzdGF0aWMgX19tZW1pbml0IHN0cnVjdCB2bWVt
bWFwX2JhY2tpbmcgKiB2bWVtbWFwX2xpc3RfYWxsb2MoaW50IG5vZGUpCiAKIAkvKiBhbGxvY2F0
ZSBhIHBhZ2Ugd2hlbiByZXF1aXJlZCBhbmQgaGFuZCBvdXQgY2h1bmtzICovCiAJaWYgKCFudW1f
bGVmdCkgewotCQluZXh0ID0gdm1lbW1hcF9hbGxvY19ibG9jayhQQUdFX1NJWkUsIG5vZGUpOwor
CQluZXh0ID0gdm1lbW1hcF9hbGxvY19ibG9jayhQQUdFX1NJWkUsIG5vZGUsIE5VTEwsIGZhbHNl
KTsKIAkJaWYgKHVubGlrZWx5KCFuZXh0KSkgewogCQkJV0FSTl9PTigxKTsKIAkJCXJldHVybiBO
VUxMOwpAQCAtMjI2LDEyICsyMjYsMTIgQEAgaW50IF9fbWVtaW5pdCB2bWVtbWFwX3BvcHVsYXRl
KHVuc2lnbmVkIGxvbmcgc3RhcnQsIHVuc2lnbmVkIGxvbmcgZW5kLCBpbnQgbm9kZSwKIAkJICog
ZmFsbCBiYWNrIHRvIHN5c3RlbSBtZW1vcnkgaWYgdGhlIGFsdG1hcCBhbGxvY2F0aW9uIGZhaWwu
CiAJCSAqLwogCQlpZiAoYWx0bWFwICYmICFhbHRtYXBfY3Jvc3NfYm91bmRhcnkoYWx0bWFwLCBz
dGFydCwgcGFnZV9zaXplKSkgewotCQkJcCA9IGFsdG1hcF9hbGxvY19ibG9ja19idWYocGFnZV9z
aXplLCBhbHRtYXApOwotCQkJaWYgKCFwKQotCQkJCXByX2RlYnVnKCJhbHRtYXAgYmxvY2sgYWxs
b2NhdGlvbiBmYWlsZWQsIGZhbGxpbmcgYmFjayB0byBzeXN0ZW0gbWVtb3J5Iik7CisJCQlwID0g
dm1lbW1hcF9hbGxvY19ibG9ja19idWYocGFnZV9zaXplLCBub2RlLAorCQkJCQkJICAgIGFsdG1h
cCwgdHJ1ZSk7CisJCX0gZWxzZSB7CisJCQlwID0gdm1lbW1hcF9hbGxvY19ibG9ja19idWYocGFn
ZV9zaXplLCBub2RlLAorCQkJCQkJICAgIE5VTEwsIGZhbHNlKTsKIAkJfQotCQlpZiAoIXApCi0J
CQlwID0gdm1lbW1hcF9hbGxvY19ibG9ja19idWYocGFnZV9zaXplLCBub2RlKTsKIAkJaWYgKCFw
KQogCQkJcmV0dXJuIC1FTk9NRU07CiAKZGlmZiAtLWdpdCBhL2FyY2gveDg2L21tL2luaXRfNjQu
YyBiL2FyY2gveDg2L21tL2luaXRfNjQuYwppbmRleCBjMjI2Nzc1NzE2MTkuLjM1Y2MwYzlkOTU3
OCAxMDA2NDQKLS0tIGEvYXJjaC94ODYvbW0vaW5pdF82NC5jCisrKyBiL2FyY2gveDg2L21tL2lu
aXRfNjQuYwpAQCAtMTQ0NCwxMCArMTQ0NCw4IEBAIHN0YXRpYyBpbnQgX19tZW1pbml0IHZtZW1t
YXBfcG9wdWxhdGVfaHVnZXBhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQsCiAJCWlmIChwbWRfbm9u
ZSgqcG1kKSkgewogCQkJdm9pZCAqcDsKIAotCQkJaWYgKGFsdG1hcCkKLQkJCQlwID0gYWx0bWFw
X2FsbG9jX2Jsb2NrX2J1ZihQTURfU0laRSwgYWx0bWFwKTsKLQkJCWVsc2UKLQkJCQlwID0gdm1l
bW1hcF9hbGxvY19ibG9ja19idWYoUE1EX1NJWkUsIG5vZGUpOworCQkJcCA9IHZtZW1tYXBfYWxs
b2NfYmxvY2tfYnVmKFBNRF9TSVpFLCBub2RlLAorCQkJCQkJICAgIGFsdG1hcCwgZmFsc2UpOwog
CQkJaWYgKHApIHsKIAkJCQlwdGVfdCBlbnRyeTsKIApkaWZmIC0tZ2l0IGEvaW5jbHVkZS9saW51
eC9tbS5oIGIvaW5jbHVkZS9saW51eC9tbS5oCmluZGV4IDRhOTg3ZDE3MzQ4OC4uYTJjYjljNjY5
ODAwIDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4L21tLmgKKysrIGIvaW5jbHVkZS9saW51eC9t
bS5oCkBAIC0yOTk0LDcgKzI5OTQsOCBAQCBwdGVfdCAqdm1lbW1hcF9wdGVfcG9wdWxhdGUocG1k
X3QgKnBtZCwgdW5zaWduZWQgbG9uZyBhZGRyLCBpbnQgbm9kZSwKIAkJCSAgICBzdHJ1Y3Qgdm1l
bV9hbHRtYXAgKmFsdG1hcCk7CiB2b2lkICp2bWVtbWFwX2FsbG9jX2Jsb2NrKHVuc2lnbmVkIGxv
bmcgc2l6ZSwgaW50IG5vZGUpOwogc3RydWN0IHZtZW1fYWx0bWFwOwotdm9pZCAqdm1lbW1hcF9h
bGxvY19ibG9ja19idWYodW5zaWduZWQgbG9uZyBzaXplLCBpbnQgbm9kZSk7Cit2b2lkICp2bWVt
bWFwX2FsbG9jX2Jsb2NrX2J1Zih1bnNpZ25lZCBsb25nIHNpemUsIGludCBub2RlLAorCQkJICAg
ICAgc3RydWN0IHZtZW1fYWx0bWFwICphbHRtYXAsIGJvb2wgZmFsbGJhY2spOwogdm9pZCAqYWx0
bWFwX2FsbG9jX2Jsb2NrX2J1Zih1bnNpZ25lZCBsb25nIHNpemUsIHN0cnVjdCB2bWVtX2FsdG1h
cCAqYWx0bWFwKTsKIHZvaWQgdm1lbW1hcF92ZXJpZnkocHRlX3QgKiwgaW50LCB1bnNpZ25lZCBs
b25nLCB1bnNpZ25lZCBsb25nKTsKIGludCB2bWVtbWFwX3BvcHVsYXRlX2Jhc2VwYWdlcyh1bnNp
Z25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwKZGlmZiAtLWdpdCBhL21tL3NwYXJz
ZS12bWVtbWFwLmMgYi9tbS9zcGFyc2Utdm1lbW1hcC5jCmluZGV4IGE0MDdhYmM5YjQ2Yy4uZjUw
MmZjZGY1MzlmIDEwMDY0NAotLS0gYS9tbS9zcGFyc2Utdm1lbW1hcC5jCisrKyBiL21tL3NwYXJz
ZS12bWVtbWFwLmMKQEAgLTcxLDEwICs3MSwyOCBAQCB2b2lkICogX19tZW1pbml0IHZtZW1tYXBf
YWxsb2NfYmxvY2sodW5zaWduZWQgbG9uZyBzaXplLCBpbnQgbm9kZSkKIH0KIAogLyogbmVlZCB0
byBtYWtlIHN1cmUgc2l6ZSBpcyBhbGwgdGhlIHNhbWUgZHVyaW5nIGVhcmx5IHN0YWdlICovCi12
b2lkICogX19tZW1pbml0IHZtZW1tYXBfYWxsb2NfYmxvY2tfYnVmKHVuc2lnbmVkIGxvbmcgc2l6
ZSwgaW50IG5vZGUpCit2b2lkICogX19tZW1pbml0IHZtZW1tYXBfYWxsb2NfYmxvY2tfYnVmKHVu
c2lnbmVkIGxvbmcgc2l6ZSwgaW50IG5vZGUsCisJCQkJCSBzdHJ1Y3Qgdm1lbV9hbHRtYXAgKmFs
dG1hcCwKKwkJCQkJIGJvb2wgZmFsbGJhY2spCiB7Ci0Jdm9pZCAqcHRyID0gc3BhcnNlX2J1ZmZl
cl9hbGxvYyhzaXplKTsKKwl2b2lkICpwdHI7CiAKKwkvKgorCSAqIFRoZXJlIGlzIG5vIHBvaW50
IGluIGFza2luZyBmb3IgZmFsbGJhY2sgd2l0aG91dAorCSAqIGFuIGFsdG1hcCByZXF1ZXN0IHRv
IGJlZ2luIHdpdGguIEp1c3Qgd2FybiBoZXJlCisJICogdG8gY2F0Y2ggcG90ZW50aWFsIGNhbGwg
c2l0ZXMgdmlvbGF0aW5nIHRoaXMuCisJICovCisJV0FSTl9PTighYWx0bWFwICYmIGZhbGxiYWNr
KTsKKworCWlmIChhbHRtYXApIHsKKwkJcHRyID0gYWx0bWFwX2FsbG9jX2Jsb2NrX2J1ZihzaXpl
LCBhbHRtYXApOworCQlpZiAoIXB0ciAmJiAhZmFsbGJhY2spCisJCQlyZXR1cm4gTlVMTDsKKwkJ
cHJfZGVidWcoImFsdG1hcCBibG9jayBhbGxvY2F0aW9uIGZhaWxlZCxcCisJCQkJZmFsbGluZyBi
YWNrIHRvIHN5c3RlbSBtZW1vcnkiKTsKKwl9CisKKwlwdHIgPSBzcGFyc2VfYnVmZmVyX2FsbG9j
KHNpemUpOwogCWlmICghcHRyKQogCQlwdHIgPSB2bWVtbWFwX2FsbG9jX2Jsb2NrKHNpemUsIG5v
ZGUpOwogCXJldHVybiBwdHI7CkBAIC0xNDgsMTAgKzE2Niw3IEBAIHB0ZV90ICogX19tZW1pbml0
IHZtZW1tYXBfcHRlX3BvcHVsYXRlKHBtZF90ICpwbWQsIHVuc2lnbmVkIGxvbmcgYWRkciwgaW50
IG5vZGUsCiAJCXB0ZV90IGVudHJ5OwogCQl2b2lkICpwOwogCi0JCWlmIChhbHRtYXApCi0JCQlw
ID0gYWx0bWFwX2FsbG9jX2Jsb2NrX2J1ZihQQUdFX1NJWkUsIGFsdG1hcCk7Ci0JCWVsc2UKLQkJ
CXAgPSB2bWVtbWFwX2FsbG9jX2Jsb2NrX2J1ZihQQUdFX1NJWkUsIG5vZGUpOworCQlwID0gdm1l
bW1hcF9hbGxvY19ibG9ja19idWYoUEFHRV9TSVpFLCBub2RlLCBhbHRtYXAsIGZhbHNlKTsKIAkJ
aWYgKCFwKQogCQkJcmV0dXJuIE5VTEw7CiAJCWVudHJ5ID0gcGZuX3B0ZShfX3BhKHApID4+IFBB
R0VfU0hJRlQsIFBBR0VfS0VSTkVMKTsKLS0gCjIuMjAuMQoKCgo+IAo+IFJvYmluLgo+IAo+PiDC
oMKgwqDCoMKgwqDCoMKgwqAgaWYgKCFwKQo+PiDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBy
ZXR1cm4gTlVMTDsKPj4gwqDCoMKgwqDCoMKgwqDCoMKgIGVudHJ5ID0gcGZuX3B0ZShfX3BhKHAp
ID4+IFBBR0VfU0hJRlQsIFBBR0VfS0VSTkVMKTsKPj4gQEAgLTIxMyw4ICsyMTksOCBAQCBwZ2Rf
dCAqIF9fbWVtaW5pdCB2bWVtbWFwX3BnZF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIGFkZHIsIGlu
dCBub2RlKQo+PiDCoMKgwqDCoMKgIHJldHVybiBwZ2Q7Cj4+IMKgIH0KPj4gwqAgLWludCBfX21l
bWluaXQgdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXModW5zaWduZWQgbG9uZyBzdGFydCwKPj4g
LcKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgdW5zaWduZWQgbG9uZyBl
bmQsIGludCBub2RlKQo+PiAraW50IF9fbWVtaW5pdCB2bWVtbWFwX3BvcHVsYXRlX2Jhc2VwYWdl
cyh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwKPj4gK8KgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgaW50IG5vZGUsIHN0cnVjdCB2bWVtX2FsdG1h
cCAqYWx0bWFwKQo+PiDCoCB7Cj4+IMKgwqDCoMKgwqAgdW5zaWduZWQgbG9uZyBhZGRyID0gc3Rh
cnQ7Cj4+IMKgwqDCoMKgwqAgcGdkX3QgKnBnZDsKPj4gQEAgLTIzNiw3ICsyNDIsNyBAQCBpbnQg
X19tZW1pbml0IHZtZW1tYXBfcG9wdWxhdGVfYmFzZXBhZ2VzKHVuc2lnbmVkIGxvbmcgc3RhcnQs
Cj4+IMKgwqDCoMKgwqDCoMKgwqDCoCBwbWQgPSB2bWVtbWFwX3BtZF9wb3B1bGF0ZShwdWQsIGFk
ZHIsIG5vZGUpOwo+PiDCoMKgwqDCoMKgwqDCoMKgwqAgaWYgKCFwbWQpCj4+IMKgwqDCoMKgwqDC
oMKgwqDCoMKgwqDCoMKgIHJldHVybiAtRU5PTUVNOwo+PiAtwqDCoMKgwqDCoMKgwqAgcHRlID0g
dm1lbW1hcF9wdGVfcG9wdWxhdGUocG1kLCBhZGRyLCBub2RlKTsKPj4gK8KgwqDCoMKgwqDCoMKg
IHB0ZSA9IHZtZW1tYXBfcHRlX3BvcHVsYXRlKHBtZCwgYWRkciwgbm9kZSwgYWx0bWFwKTsKPj4g
wqDCoMKgwqDCoMKgwqDCoMKgIGlmICghcHRlKQo+PiDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oCByZXR1cm4gLUVOT01FTTsKPj4gwqDCoMKgwqDCoMKgwqDCoMKgIHZtZW1tYXBfdmVyaWZ5KHB0
ZSwgbm9kZSwgYWRkciwgYWRkciArIFBBR0VfU0laRSk7Cj4+Cj4gCj4gLS0tLS0+OC0tLS0tCj4g
RnJvbTogUm9iaW4gTXVycGh5IDxyb2Jpbi5tdXJwaHlAYXJtLmNvbT4KPiBTdWJqZWN0OiBbUEFU
Q0hdIGFybTY0L21tOiBDb25zb2xpZGF0ZSB2bWVtbWFwX3BvcHVsYXRlKCkKPiAKPiBTaW5jZSB3
ZSBhbHJlYWR5IGhhdmUgYSBjdXN0b20gdm1lbW1hcF9wb3B1bGF0ZSgpIGltcGxlbWVudGF0aW9u
LCBmb2xkCj4gdGhlIG5vbi1zZWN0aW9uLW1hcCBjYXNlIGludG8gdGhhdCBhcyB3ZWxsLCBzbyB0
aGF0IHdlIGNhbiBlYXNpbHkgYWRkCj4gYWx0bWFwIHN1cHBvcnQgZm9yIGJvdGggY2FzZXMgd2l0
aG91dCBoYXZpbmcgdG8gbWVzcyB3aXRoIGNvcmUgY29kZS4KPiAKPiBTaWduZWQtb2ZmLWJ5OiBS
b2JpbiBNdXJwaHkgPHJvYmluLm11cnBoeUBhcm0uY29tPgo+IC0tLQo+IMKgYXJjaC9hcm02NC9t
bS9tbXUuYyB8IDM0ICsrKysrKysrKysrKysrKysrKysrKy0tLS0tLS0tLS0tLS0KPiDCoDEgZmls
ZSBjaGFuZ2VkLCAyMSBpbnNlcnRpb25zKCspLCAxMyBkZWxldGlvbnMoLSkKPiAKPiBkaWZmIC0t
Z2l0IGEvYXJjaC9hcm02NC9tbS9tbXUuYyBiL2FyY2gvYXJtNjQvbW0vbW11LmMKPiBpbmRleCAx
MjhmNzA4NTJiZjMuLmUyNTBmZDQxNGIyYiAxMDA2NDQKPiAtLS0gYS9hcmNoL2FybTY0L21tL21t
dS5jCj4gKysrIGIvYXJjaC9hcm02NC9tbS9tbXUuYwo+IEBAIC03MjUsMTMgKzcyNSw2IEBAIGlu
dCBrZXJuX2FkZHJfdmFsaWQodW5zaWduZWQgbG9uZyBhZGRyKQo+IMKgwqDCoMKgIHJldHVybiBw
Zm5fdmFsaWQocHRlX3BmbihwdGUpKTsKPiDCoH0KPiDCoCNpZmRlZiBDT05GSUdfU1BBUlNFTUVN
X1ZNRU1NQVAKPiAtI2lmICFBUk02NF9TV0FQUEVSX1VTRVNfU0VDVElPTl9NQVBTCj4gLWludCBf
X21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBs
b25nIGVuZCwgaW50IG5vZGUsCj4gLcKgwqDCoMKgwqDCoMKgIHN0cnVjdCB2bWVtX2FsdG1hcCAq
YWx0bWFwKQo+IC17Cj4gLcKgwqDCoCByZXR1cm4gdm1lbW1hcF9wb3B1bGF0ZV9iYXNlcGFnZXMo
c3RhcnQsIGVuZCwgbm9kZSk7Cj4gLX0KPiAtI2Vsc2XCoMKgwqAgLyogIUFSTTY0X1NXQVBQRVJf
VVNFU19TRUNUSU9OX01BUFMgKi8KPiDCoGludCBfX21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1
bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwgaW50IG5vZGUsCj4gwqDCoMKg
wqDCoMKgwqDCoCBzdHJ1Y3Qgdm1lbV9hbHRtYXAgKmFsdG1hcCkKPiDCoHsKPiBAQCAtNzQwLDYg
KzczMyw3IEBAIGludCBfX21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIHN0
YXJ0LCB1bnNpZ25lZCBsb25nIGVuZCwgaW50IG5vZGUsCj4gwqDCoMKgwqAgcGdkX3QgKnBnZHA7
Cj4gwqDCoMKgwqAgcHVkX3QgKnB1ZHA7Cj4gwqDCoMKgwqAgcG1kX3QgKnBtZHA7Cj4gK8KgwqDC
oCBwdGVfdCAqcHRlcDsKPiAKPiDCoMKgwqDCoCBkbyB7Cj4gwqDCoMKgwqDCoMKgwqDCoCBuZXh0
ID0gcG1kX2FkZHJfZW5kKGFkZHIsIGVuZCk7Cj4gQEAgLTc1MiwyMiArNzQ2LDM2IEBAIGludCBf
X21lbWluaXQgdm1lbW1hcF9wb3B1bGF0ZSh1bnNpZ25lZCBsb25nIHN0YXJ0LCB1bnNpZ25lZCBs
b25nIGVuZCwgaW50IG5vZGUsCj4gwqDCoMKgwqDCoMKgwqDCoCBpZiAoIXB1ZHApCj4gwqDCoMKg
wqDCoMKgwqDCoMKgwqDCoMKgIHJldHVybiAtRU5PTUVNOwo+IAo+ICsjaWYgQVJNNjRfU1dBUFBF
Ul9VU0VTX1NFQ1RJT05fTUFQUwo+IMKgwqDCoMKgwqDCoMKgwqAgcG1kcCA9IHBtZF9vZmZzZXQo
cHVkcCwgYWRkcik7Cj4gwqDCoMKgwqDCoMKgwqDCoCBpZiAocG1kX25vbmUoUkVBRF9PTkNFKCpw
bWRwKSkpIHsKPiAtwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCB2b2lkICpwID0gTlVMTDsKPiAtCj4g
LcKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgcCA9IHZtZW1tYXBfYWxsb2NfYmxvY2tfYnVmKFBNRF9T
SVpFLCBub2RlKTsKPiArwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCB2b2lkICpwID0gdm1lbW1hcF9h
bGxvY19ibG9ja19idWYoUE1EX1NJWkUsIG5vZGUpOwo+IMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDC
oCBpZiAoIXApCj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgwqAgcmV0dXJuIC1FTk9N
RU07Cj4gCj4gwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIHBtZF9zZXRfaHVnZShwbWRwLCBfX3Bh
KHApLCBfX3BncHJvdChQUk9UX1NFQ1RfTk9STUFMKSk7Cj4gLcKgwqDCoMKgwqDCoMKgIH0gZWxz
ZQo+IC3CoMKgwqDCoMKgwqDCoMKgwqDCoMKgIHZtZW1tYXBfdmVyaWZ5KChwdGVfdCAqKXBtZHAs
IG5vZGUsIGFkZHIsIG5leHQpOwo+ICvCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIGNvbnRpbnVlOwo+
ICvCoMKgwqDCoMKgwqDCoCB9Cj4gKyNlbHNlCj4gK8KgwqDCoMKgwqDCoMKgIHBtZHAgPSB2bWVt
bWFwX3BtZF9wb3B1bGF0ZShwbWRwLCBhZGRyLCBub2RlKTsKPiArwqDCoMKgwqDCoMKgwqAgaWYg
KCFwbWRwKQo+ICvCoMKgwqDCoMKgwqDCoMKgwqDCoMKgIHJldHVybiAtRU5PTUVNOwo+ICsKPiAr
wqDCoMKgwqDCoMKgwqAgcHRlcCA9IHB0ZV9vZmZzZXRfa2VybmVsKHBtZHAsIGFkZHIpOwo+ICvC
oMKgwqDCoMKgwqDCoCBpZiAocHRlX25vbmUoUkVBRF9PTkNFKCpwdGVwKSkpIHsKPiArwqDCoMKg
wqDCoMKgwqDCoMKgwqDCoCB2b2lkICpwID0gdm1lbW1hcF9hbGxvY19ibG9ja19idWYoUEFHRV9T
SVpFLCBub2RlKTsKPiArwqDCoMKgwqDCoMKgwqDCoMKgwqDCoCBpZiAoIXApCj4gK8KgwqDCoMKg
wqDCoMKgwqDCoMKgwqDCoMKgwqDCoCByZXR1cm4gLUVOT01FTTsKPiArCj4gK8KgwqDCoMKgwqDC
oMKgwqDCoMKgwqAgc2V0X3B0ZShwdGVwLCBwZm5fcHRlKF9fcGEocCkgPj4gUEFHRV9TSElGVCwg
UEFHRV9LRVJORUwpKTsKPiArwqDCoMKgwqDCoMKgwqAgfQo+ICsjZW5kaWYKPiArwqDCoMKgwqDC
oMKgwqAgdm1lbW1hcF92ZXJpZnkoKHB0ZV90ICopcG1kcCwgbm9kZSwgYWRkciwgbmV4dCk7Cj4g
wqDCoMKgwqAgfSB3aGlsZSAoYWRkciA9IG5leHQsIGFkZHIgIT0gZW5kKTsKPiAKPiDCoMKgwqDC
oCByZXR1cm4gMDsKPiDCoH0KPiAtI2VuZGlmwqDCoMKgIC8qICFBUk02NF9TV0FQUEVSX1VTRVNf
U0VDVElPTl9NQVBTICovCj4gKwo+IMKgdm9pZCB2bWVtbWFwX2ZyZWUodW5zaWduZWQgbG9uZyBz
dGFydCwgdW5zaWduZWQgbG9uZyBlbmQsCj4gwqDCoMKgwqDCoMKgwqDCoCBzdHJ1Y3Qgdm1lbV9h
bHRtYXAgKmFsdG1hcCkKPiDCoHsKPiAKPiAKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fCmxpbnV4LWFybS1rZXJuZWwgbWFpbGluZyBsaXN0CmxpbnV4LWFy
bS1rZXJuZWxAbGlzdHMuaW5mcmFkZWFkLm9yZwpodHRwOi8vbGlzdHMuaW5mcmFkZWFkLm9yZy9t
YWlsbWFuL2xpc3RpbmZvL2xpbnV4LWFybS1rZXJuZWwK
